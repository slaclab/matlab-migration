classdef AxesConverter < appmigration.internal.ComponentConverter
    %AXESCONVERTER Converts an axes to a uiaxes
    
    %   Copyright 2017-2020 The MathWorks, Inc.
    
    methods
        function [componentCreationFunction, issues] = getComponentCreationFunction(~, ~)
            componentCreationFunction = @uiaxes;
            issues = [];
        end
        
        function conversionFuncs = getCallbackConversionFunctions(~, ~)
            import appmigration.internal.CommonCallbackConversionUtil;
            
            conversionFuncs = {...
                {'ButtonDownFcn', @CommonCallbackConversionUtil.convertUnsupportedCallback},...
                {'CreateFcn'    , @CommonCallbackConversionUtil.convertCreateFcn},...
                {'DeleteFcn'    , @CommonCallbackConversionUtil.convertDeleteFcn},...
                };
        end
        
        function conversionFuncs = getPropertyConversionFunctions(~)
            import appmigration.internal.CommonPropertyConversionUtil;
            import appmigration.internal.AxesConverter;
            
            conversionFuncs = {...
                {'BackgroundColor' , @AxesConverter.convertBackgroundColor},...
                {'BusyAction'      , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'Colormap'        , @AxesConverter.convertColormap},...
                {'ContextMenu'     , @CommonPropertyConversionUtil.convertContextMenu},...
                {'FontAngle'       , @CommonPropertyConversionUtil.convertFontAngle},...
                {'FontName'        , @CommonPropertyConversionUtil.convertFontName},...
                {'FontSize'        , @CommonPropertyConversionUtil.convertFontSize},...
                {'FontWeight'      , @CommonPropertyConversionUtil.convertFontWeight},...
                {'HandleVisibility', @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'Interruptible'   , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'NextPlot'        , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'PickableParts'   , @AxesConverter.convertPickableParts},...
                {'Position'        , @AxesConverter.convertPosition},...
                {'Tag'             , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                {'UserData'        , @CommonPropertyConversionUtil.convertUserData},...
                {'Visible'         , @CommonPropertyConversionUtil.convertOneToOneProperty},...
                ...% One-to-one properties to convert if mode is 'manual'
                {{...
                'ALim',...
                'AlphaScale',...
                'Alphamap',...
                'AmbientLightColor',...
                'Box',...
                'BoxStyle',...
                'CLim',...
                'CameraViewAngle',...
                'CameraPosition',...
                'CameraTarget',...
                'CameraUpVector',...
                'Clipping',...
                'ClippingStyle',...
                'Color',...
                'ColorOrder',...
                'ColorOrderIndex',...
                'ColorScale',...
                'DataAspectRatio',...
                'GridAlpha',...
                'GridColor',...
                'GridLineStyle',...
                'LabelFontSizeMultiplier',...
                'Layer',...
                'LineStyleOrder',...
                'LineStyleOrderIndex',...
                'LineWidth',...
                'MinorGridAlpha',...
                'MinorGridColor',...
                'MinorGridLineStyle',...
                'PlotBoxAspectRatio',...
                'Projection',...
                'SortMethod',...
                'TickDir',...
                'TickLabelInterpreter',...
                'TickLength',...
                'TitleFontWeight',...
                'View',...
                'XAxisLocation',...
                'XColor',...
                'XDir',...
                'XGrid',...
                'XLim',...
                'XMinorGrid',...
                'XMinorTick',...
                'XScale',...
                'XTick',...
                'XTickLabel',...
                'XTickLabelRotation',...
                'YAxisLocation',...
                'YColor',...
                'YDir',...
                'YGrid',...
                'YLim',...
                'YMinorGrid',...
                'YMinorTick',...
                'YScale',...
                'YTick',...
                'YTickLabel',...
                'YTickLabelRotation',...
                'ZColor',...
                'ZDir',...
                'ZGrid',...
                'ZLim',...
                'ZMinorGrid',...
                'ZMinorTick',...
                'ZScale',...
                'ZTick',...
                'ZTickLabel',...
                'ZTickLabelRotation',...
                }, @AxesConverter.convertOneToOneIfModeIsManual},...
                };
            
            % Properties Implicitly Converted
            %   FontUnits - set to 'pixels' by ComponentConverter.convert()
            %       because this needs to be done prior to doing any
            %       conversions.
            %   HitTest - not supported by uiaxes in App Designer. This
            %       is reported when converting PickableParts as those two
            %       properties go together.
            %   Parent - set by ComponentCovnerter.convert()
            %   Units - set to 'pixels' by ComponentConverter.convert()
            %       because this needs to be done prior to doing any
            %       conversions.
            
            % Properties NOT converted and NOT reported:
            %   Not applicable - Not Reported
            %     BeingDeleted - Read-only
            %     CurrentPoint
            %     TightInset
            %   Not supported and no workarounds
            %     FontSmoothing
            %     SelectionHighlight
            %
            %   All public mode properties are not converted because they
            %   will automatically be set when setting the corresponding
            %   property.
        end
    end
    
    methods (Static)
        function [pvp, issues] = convertOneToOneIfModeIsManual(guideComponent, props)
            
            pvp = [];
            issues = [];
            
            % Loop over all of the one to one properties unique to axes and
            % only convert them if the user set the value (i.e. mode
            % property is 'manual')
            for i=1:length(props)
                prop = props{i};
                mode = guideComponent.([prop, 'Mode']);
                
                if isequal(mode, 'manual')
                    pvp = [pvp {prop, guideComponent.(prop)}]; %#ok<AGROW>
                end
            end
        end
        
        function [pvp, issues] = convertBackgroundColor(guideComponent, prop)
            
            import appmigration.internal.FigureConverter;
            import appmigration.internal.CommonPropertyConversionUtil;
            
            parent = guideComponent.Parent;
            
            % Set the background color to be the same as that of the axes
            % parent (either a figure or uipanel).
            if isequal(parent.Type, 'figure')
                [pvp, issues] = FigureConverter.convertColor(parent, 'Color');
                % If pvp is empty, no conversion needs to be done because
                % we will use the default background color which should be
                % the same as default uifigure background color.
                if ~isempty(pvp)
                    % Need to update the property name from 'Color' to
                    % 'BackgroundColor'
                    pvp{1} = prop;
                end
            else
                % Parent is a uipanel so do same conversion as uipanel
                [pvp, issues] = CommonPropertyConversionUtil.convertBackgroundColor(parent, prop);
            end
        end
        
        function [pvp, issues] = convertColormap(guideComponent, prop)
            
            import appmigration.internal.AppConversionIssueFactory;
            
            pvp = [];
            issues = [];
            
            mode = guideComponent.([prop, 'Mode']);
            
            % Colormap is not configurable in App Designer during design
            % time. If the user has changed this value (i.e. mode =
            % 'manual') then report an issue with a workaround of
            % programmatically setting this property using the app's
            % startupfcn.
            if isequal(mode, 'manual')
                issues = AppConversionIssueFactory.createPropertyIssue(...
                    AppConversionIssueFactory.Ids.UnsupportedPropertyAxesColormap,...
                    guideComponent, prop);
            end
        end
        
        function [pvp, issues] = convertPickableParts(guideComponent, prop)
            
            import appmigration.internal.AppConversionIssueFactory;
            
            pvp = [];
            
            % PickableParts is not supported on uiaxes in App Designer. But
            % all GUIDE apps with an axes have this set to 'visible'.
            % We don't want to report because it is only applicable to a
            % very small frequency of apps.
            issues = [];
        end
        
        function [pvp, issues] = convertPosition(guideComponent, prop) %#ok<INUSD>
            
            issues = [];
            
            innerPosition = guideComponent.InnerPosition;
            tightInset = guideComponent.TightInset;
            
            % TightInset is a four element vector that specifies the
            % margins for the axes text label ([left bottom right top]).
            
            % The GUIDE canvas shows an axes using the InnerPosition
            % bounds. App Designer, however will show the uiaxes using the
            % OuterPosition bounds. To make the position look as correct as
            % possible, the uiaxes OuterPosition should be set to the axes
            % InnerPosition ([x, y, w, h]) but accounting for the
            % TightInsets ([left bottom right top]). Example:
            %  newPos = [(x-left) (y-bottom) (w+left+right) (h+bottom+top)]
            
            % Adjust the x location by moving left by the amount of the
            % "left" TightInset
            newPosition(1) = innerPosition(1) - tightInset(1);
            
            % Adjust the y location by moving down by the amount of the
            % "bottom" TightInset.
            newPosition(2) = innerPosition(2) - tightInset(2);
            
            % Adjust the width by increasing it by the "left" and "right"
            % of the TightInset
            newPosition(3) = innerPosition(3) + tightInset(1) + tightInset(3);
            
            % Adjust the height by increasing it by the "bottom" and "top"
            % of the TightInset
            newPosition(4) = innerPosition(4) + tightInset(2) + tightInset(4);
            
            % Round the position so that we don't have extra floating point
            % cruft
            newPosition = round(newPosition);
            
            pvp = {'OuterPosition', newPosition};
        end
    end
end
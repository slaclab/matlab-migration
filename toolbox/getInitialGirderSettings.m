function [ Slots, quad_0_array, bfw_0_array, bfw_C_array ] = getInitialGirderSettings
% getInitialGirderSettings provides the initial cam settings for the LCLS
% undulator girders for the current run, including the colligions positions
% for the BFWs.
%
%       Example Usage:
%       % Purpose: calculate X-wire and Y-wire offsets of BFW 33 in microns.
%
%       [ Slots, q0, bfw0, bfwC ] = getInitialGirderSettings;
%       s                         = 33;
%       X_Wire_offset             = ( bfw0 ( s, 1 ) - bfwC ( s, 1 ) ) * 1e3
%       Y_Wire_offset             = ( bfw0 ( s, 2 ) - bfwC ( s, 2 ) ) * 1e3
%
%       With s being one of the elements of Slots.
%
%       Return values:
%
%       Slots           List of slot number, i.e., 1 : 33.
%       q0              Array: A ( 33, 3 ) of initial quad positions
%       bfw0            Array: A ( 33, 3 ) of initial bfw positions
%       bfwC            Array: A ( 33, 3 ) of wire collision positions
%
%       Array definition:
%       
%       The 3 arrays have the following content:
%
%       A ( s, 1 ) : x position [mm] at slot s relative to beam axis
%       A ( s, 2 ) : y position [mm] at slot s relative to beam axis
%       A ( s, 3 ) : z position [mm] at slot s relative to segment center
%
%       Function last edited May 5, 2010 by HDN

quad_0 = cell ( 1, 33 );
bfw_0  = cell ( 1, 33 );
bfw_C  = cell ( 1, 33 );

quad_0 {01} = [ -0.017,  0.013, +1807.890 ];
quad_0 {02} = [ -0.116, -0.087, +1807.890 ];
quad_0 {03} = [ -0.030, -0.070, +1807.890 ];
quad_0 {04} = [ -0.019, -0.043, +1807.890 ];
quad_0 {05} = [  0.039, -0.023, +1807.890 ];
quad_0 {06} = [  0.142, -0.008, +1807.890 ];
quad_0 {07} = [ -0.053,  0.034, +1807.890 ];
quad_0 {08} = [  0.036, -0.022, +1807.890 ];
quad_0 {09} = [ -0.077, -0.030, +1807.890 ];
quad_0 {10} = [  0.016, -0.015, +1807.890 ];
quad_0 {11} = [ -0.069, -0.063, +1807.890 ];
quad_0 {12} = [ -0.168, -0.028, +1807.890 ];
quad_0 {13} = [ -0.010,  0.018, +1807.890 ];
quad_0 {14} = [ -0.122,  0.039, +1807.890 ];
quad_0 {15} = [ -0.059,  0.016, +1807.890 ];
quad_0 {16} = [ -0.043,  0.024, +1807.890 ];
quad_0 {17} = [ -0.124, -0.016, +1807.890 ];
quad_0 {18} = [ -0.022, -0.004, +1807.890 ];
quad_0 {19} = [  0.010,  0.040, +1807.890 ];
quad_0 {20} = [ -0.016,  0.110, +1807.890 ];
quad_0 {21} = [  0.061,  0.019, +1807.890 ];
quad_0 {22} = [ -0.030,  0.062, +1807.890 ];
quad_0 {23} = [ -0.088,  0.087, +1807.890 ];
quad_0 {24} = [  0.045,  0.075, +1807.890 ];
quad_0 {25} = [ -0.011,  0.097, +1807.890 ];
quad_0 {26} = [  0.031,  0.071, +1807.890 ];
quad_0 {27} = [  0.068,  0.084, +1807.890 ];
quad_0 {28} = [ -0.027,  0.014, +1807.890 ];
quad_0 {29} = [ -0.033,  0.030, +1807.890 ];
quad_0 {30} = [  0.041,  0.048, +1807.890 ];
quad_0 {31} = [ -0.091, -0.064, +1807.890 ];
quad_0 {32} = [  0.085, -0.024, +1807.890 ];
quad_0 {33} = [  0.087, -0.056, +1807.890 ];

bfw_0 {01}  = [  0.004,  0.071, -1795.2600 ];
bfw_0 {02}  = [ -0.119,  0.047, -1795.2600 ];
bfw_0 {03}  = [  0.136, -0.095, -1795.2600 ];
bfw_0 {04}  = [  0.063, -0.083, -1795.2600 ];
bfw_0 {05}  = [ -0.048, -0.102, -1795.2600 ];
bfw_0 {06}  = [ -0.087, -0.055, -1795.2600 ];
bfw_0 {07}  = [ -0.006,  0.033, -1795.2600 ];
bfw_0 {08}  = [  0.078, -0.005, -1795.2600 ];
bfw_0 {09}  = [  0.077, -0.151, -1795.2600 ];
bfw_0 {10}  = [ -0.048,  0.026, -1795.2600 ];
bfw_0 {11}  = [ -0.089,  0.058, -1795.2600 ];
bfw_0 {12}  = [ -0.001,  0.082, -1795.2600 ];
bfw_0 {13}  = [ -0.170,  0.006, -1795.2600 ];
bfw_0 {14}  = [ -0.098, -0.054, -1795.2600 ];
bfw_0 {15}  = [  0.071, -0.002, -1795.2600 ];
bfw_0 {16}  = [ -0.077, -0.104, -1795.2600 ];
bfw_0 {17}  = [  0.088,  0.004, -1795.2600 ];
bfw_0 {18}  = [  0.103, -0.128, -1795.2600 ];
bfw_0 {19}  = [ -0.072,  0.004, -1795.2600 ];
bfw_0 {20}  = [ -0.151, -0.088, -1795.2600 ];
bfw_0 {21}  = [  0.085,  0.021, -1795.2600 ];
bfw_0 {22}  = [  0.019,  0.023, -1795.2600 ];
bfw_0 {23}  = [  0.077,  0.025, -1795.2600 ];
bfw_0 {24}  = [ -0.051, -0.034, -1795.2600 ];
bfw_0 {25}  = [ -0.122, -0.044, -1795.2600 ];
bfw_0 {26}  = [  0.072, -0.059, -1795.2600 ];
bfw_0 {27}  = [ -0.128, -0.118, -1795.2600 ];
bfw_0 {28}  = [  0.096, -0.087, -1795.2600 ];
bfw_0 {29}  = [ -0.062, -0.021, -1795.2600 ];
bfw_0 {30}  = [  0.066,  0.034, -1795.2600 ];
bfw_0 {31}  = [ -0.034,  0.073, -1795.2600 ];
bfw_0 {32}  = [ -0.167, -0.066, -1795.2600 ];
bfw_0 {33}  = [ -0.100,  0.043, -1795.2600 ];

bfw_C {01}  = [  0.453,  0.408, -1795.2600 ];
bfw_C {02}  = [  0.596,  0.391, -1795.2600 ];
bfw_C {03}  = [  0.738,  0.137, -1795.2600 ];
bfw_C {04}  = [  0.540,  0.158, -1795.2600 ];
bfw_C {05}  = [  0.322,  0.168, -1795.2600 ];
bfw_C {06}  = [  0.651,  0.266, -1795.2600 ];
bfw_C {07}  = [  0.660,  0.252, -1795.2600 ];
bfw_C {08}  = [  0.462,  0.196, -1795.2600 ];
bfw_C {09}  = [  0.766,  0.185, -1795.2600 ];
bfw_C {10}  = [  0.183,  0.250, -1795.2600 ];
bfw_C {11}  = [  0.245,  0.245, -1795.2600 ];
bfw_C {12}  = [  0.883,  0.356, -1795.2600 ];
bfw_C {13}  = [  0.335,  0.215, -1795.2600 ];
bfw_C {14}  = [  0.224,  0.145, -1795.2600 ];
bfw_C {15}  = [  0.389,  0.113, -1795.2600 ];
bfw_C {16}  = [  0.344,  0.149, -1795.2600 ];
bfw_C {17}  = [  0.853, -0.062, -1795.2600 ];
bfw_C {18}  = [  0.661, -0.173, -1795.2600 ];
bfw_C {19}  = [  0.485,  0.284, -1795.2600 ];
bfw_C {20}  = [  0.378, -0.113, -1795.2600 ];
bfw_C {21}  = [  0.245,  0.123, -1795.2600 ];
bfw_C {22}  = [  0.968,  0.455, -1795.2600 ];
bfw_C {23}  = [  0.662,  0.231, -1795.2600 ];
bfw_C {24}  = [  0.081,  0.137, -1795.2600 ];
bfw_C {25}  = [  0.739,  0.270, -1795.2600 ];
bfw_C {26}  = [  0.633,  0.177, -1795.2600 ];
bfw_C {27}  = [  0.180,  0.118, -1795.2600 ];
bfw_C {28}  = [  0.951,  0.117, -1795.2600 ];
bfw_C {29}  = [  1.144,  0.221, -1795.2600 ];
bfw_C {30}  = [  0.498,  0.333, -1795.2600 ];
bfw_C {31}  = [  0.392,  0.279, -1795.2600 ];
bfw_C {32}  = [  0.256,  0.115, -1795.2600 ];
bfw_C {33}  = [  0.165, -0.019, -1795.2600 ];

quad_0_array = zeros ( 33, 3 );
bfw_0_array  = zeros ( 33, 3 );
bfw_C_array  = zeros ( 33, 3 );
Slots        = zeros ( 1, 33 );

for j = 1 : 33
    Slots ( j ) = j;
    
    for k = 1 : 3
        quad_0_array ( j, k ) = quad_0 { j } ( k );
        bfw_0_array  ( j, k ) = bfw_0  { j } ( k );
        bfw_C_array  ( j, k ) = bfw_C  { j } ( k );
    end
end

end
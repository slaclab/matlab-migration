function MCC_Hammer_GUI()
% HammerGUI is an interface between operators and the MCC_Hammer process.
%
% Author: Benjamin Ripman
% Last revision on 7/12/12 by Benjamin Ripman


clear

HammerFig = figure('Name','MCC Hammer','Position',[360,600,600,400], ...
    'MenuBar','none','Resize','off', 'Color',get(0,'defaultuicontrolbackgroundcolor'), ...
    'CloseRequestFcn', {@Close_MCC_Hammer});

Start = uicontrol(HammerFig,'Style','pushbutton','String','Start', ...
    'Position',[150 325 100 40],'BackgroundColor',[0.4,0.8,0.4], 'Callback', {@Start_Callback});
Stop = uicontrol(HammerFig,'Style','pushbutton','String','Stop', ...
    'Position',[350 325 100 40],'Enable','off','Interruptible','off', ...
    'BackgroundColor',[0.9,0.2,0.2],'Callback', {@Stop_Callback});
Enable = uicontrol(HammerFig,'Style','pushbutton','String','Enable', ...
    'Position',[275 350 50 20],'BackgroundColor',[0.4,0.8,0.4],'Visible', 'off', ...
    'Callback', {@Enable_Callback});
Kill = uicontrol(HammerFig,'Style','pushbutton','String','Kill', ...
    'Position',[275 320 50 20],'BackgroundColor',[0.9,0.2,0.2],'Visible', 'off', ...
    'Callback', {@Kill_Callback});
Messages = uipanel('Parent',HammerFig, 'Title','Messages','BackgroundColor', ...
    get(0,'defaultuicontrolbackgroundcolor'),'Titleposition', 'centertop', ...
    'Position',[0.03 0.13 0.94 0.61]);
MessageBox = uicontrol('Parent',Messages,'Style','text','Position', ...
    [97 12 370 210],'String',{'Every time you see me, that Hammer''s just so hype.', ...
    'I''m dope on the floor and I''m magic on the mic.'},'BackgroundColor','white');
TimestampsLeft = uicontrol('Parent',Messages,'Style','text','Position', ...
    [17 12 80 210],'String',{''},'BackgroundColor','white');
TimestampsRight = uicontrol('Parent',Messages,'Style','text','Position', ...
    [467 12 80 210],'String',{''},'BackgroundColor','white');
NeverGiveUp = uicontrol(HammerFig,'Style','checkbox','Position',[246 20 20 15], ...
    'Value',lcaGetSmart('SIOC:SYS0:ML02:AO006'),'Callback', {@NeverGiveUp_Callback});
NeverGiveUpLabel = uicontrol(HammerFig,'Style','text','Position',[269 18 90 15], ...
    'string','Never give up');

lcaSetMonitor({'SIOC:SYS0:ML00:AO866'; ...
    'SIOC:SYS0:ML02:AO006'; ...
    'SIOC:SYS0:ML02:AO009'; ...
    'SIOC:SYS0:ML02:SO0009'; ...
    'SIOC:SYS0:ML02:AO010'; ...
    'SIOC:SYS0:ML02:SO0010'; ...
    'SIOC:SYS0:ML02:AO011'; ... 
    'SIOC:SYS0:ML02:SO0011'; ...
    'SIOC:SYS0:ML02:AO012'; ...
    'SIOC:SYS0:ML02:SO0012'; ...
    'SIOC:SYS0:ML02:AO013'; ...
    'SIOC:SYS0:ML02:SO0013'; ...
    'SIOC:SYS0:ML02:AO014'; ... 
    'SIOC:SYS0:ML02:SO0014'; ...
    'SIOC:SYS0:ML02:AO015'; ...
    'SIOC:SYS0:ML02:SO0015'; ...
    'SIOC:SYS0:ML02:AO016'; ...
    'SIOC:SYS0:ML02:SO0016'; ...
    'SIOC:SYS0:ML02:AO017'; ... 
    'SIOC:SYS0:ML02:SO0017'; ...
    'SIOC:SYS0:ML02:AO018'; ...
    'SIOC:SYS0:ML02:SO0018'; ...
    'SIOC:SYS0:ML02:AO019'; ...
    'SIOC:SYS0:ML02:SO0019'; ...
    'SIOC:SYS0:ML02:AO020'; ... 
    'SIOC:SYS0:ML02:SO0020'; ...
    'SIOC:SYS0:ML02:AO021'; ...
    'SIOC:SYS0:ML02:SO0021'; ...
    'SIOC:SYS0:ML02:AO022'; ...
    'SIOC:SYS0:ML02:SO0022'})

refreshTimer = timer ('TimerFcn', @Timer_Callback_fcn, 'Period', 0.05, 'ExecutionMode', 'fixedRate' );
start(refreshTimer);


    function Start_Callback(source, eventdata)
        % Sets the MCC_Hammer permit PV to 1.
        lcaPutSmart('SIOC:SYS0:ML00:AO866',1);
    end

    function Stop_Callback(source, eventdata)
        % Sets the MCC_Hammer permit PV to 0.
        lcaPutSmart('SIOC:SYS0:ML00:AO866',0);
    end

    function Enable_Callback(source, eventdata)
        % Sets the MCC_Hammer killswitch PV to 1.
        lcaPutSmart('SIOC:SYS0:ML02:AO008',1);
    end

    function Kill_Callback(source, eventdata)
        % Sets the MCC_Hammer killswitch PV to 0.
        lcaPutSmart('SIOC:SYS0:ML02:AO008',0);
    end

    function NeverGiveUp_Callback(source, eventdata)
        % Update PV to reflect the new state of the checkbox.
        lcaPutSmart('SIOC:SYS0:ML02:AO006', get(NeverGiveUp,'Value'));
    end

    function Close_MCC_Hammer(source, eventdata)

        stop(refreshTimer);
        delete(refreshTimer);
        delete(gcf);
        % exit from Matlab when not running the desktop
        if usejava('desktop')
            % don't exit from Matlab
            disp('Goodbye!')
        else
            exit
        end

    end

    function Timer_Callback_fcn (obj, event)
        % Executes with each timer tick. Keeps different instances of this
        % GUI in synch with each other.

        % Synch NeverGiveUp checkbox
        set(NeverGiveUp,'Value', lcaGetSmart('SIOC:SYS0:ML02:AO006'))

        if lcaGetSmart('SIOC:SYS0:ML00:AO866')
            % MCC_Hammer is running

            set(Start,'Enable','off');
            set(Start,'String','Running...');
            set(Stop,'Enable','on');

        else
            % MCC_Hammer is not running

            set(Start,'Enable','on');
            set(Start,'String','Start');
            set(Stop,'Enable','off');

        end
        
        if ~lcaGetSmart('SIOC:SYS0:ML02:AO008')
            % Killswitch has been thrown, show enable button
            set(Enable,'Visible','on');
            
        else
            % Killswitch not thrown, hide enable button
            set(Enable,'Visible','off');
            
        end

        Update_Message_Window();

    end

    function Update_Message_Window()
        % Synchs the contents of this GUI's message window with the global
        % messages. Messages are stored in PVs. The numerical content of
        % the PV is used as an index to reference the desired string within
        % an array of all possible messages. The timestamp associated with
        % each message is stored in the PV's comment field.

        possible_messages = {' '; ... % No message
            'Every time you see me, that Hammer''s just so hype'; ...
            'I''m dope on the floor and I''m magic on the mic.'; ...
            'Yo, let me bust the funky lyrics!'; ...
            'You can''t touch this'; ...
            'STOP!'; ...
            'Hammer time!'; ...
            'Now why would I ever stop doing this'; ...
            'With others making records that just don''t hit?'; ...
            '***************** GUARDIAN FAULT *****************'; ...
            '******************** BCS FAULT ********************'; ...
            'Yo, sound the bell - school is in, suckah!'; ...
            'Beam won''t run to BYKIK - stopping MCC_Hammer!'; ...
            'Beam won''t run to dump - stopping MCC_Hammer!'; ...
            'Something went wrong. Please email bripman.'; ...
            'Blacklisted MPS fault detected -- stoppers.'; ...
            'Blacklisted MPS fault detected -- OTR screens.'; ...
            'Blacklisted MPS fault detected -- toroids.'; ...
            'Cannot unlatch faults while SXRSS or HXRSS not in SASE mode.'; ...
            'Blacklisted MPS fault detected -- AMO.'; ...
            'Blacklisted MPS fault detected -- SXR.'; ...
            'Blacklisted MPS fault detected -- XPP.'; ...
            'Blacklisted MPS fault detected -- XCS.'; ...
            'Blacklisted MPS fault detected -- CXI.'; ...
            'Blacklisted MPS fault detected -- MEC.'};

        message_pvs = {'SIOC:SYS0:ML02:AO009'; ...
            'SIOC:SYS0:ML02:AO010'; ...
            'SIOC:SYS0:ML02:AO011'; ...
            'SIOC:SYS0:ML02:AO012'; ...
            'SIOC:SYS0:ML02:AO013'; ...
            'SIOC:SYS0:ML02:AO014'; ...
            'SIOC:SYS0:ML02:AO015'; ...
            'SIOC:SYS0:ML02:AO016'; ...
            'SIOC:SYS0:ML02:AO017'; ...
            'SIOC:SYS0:ML02:AO018'; ...
            'SIOC:SYS0:ML02:AO019'; ...
            'SIOC:SYS0:ML02:AO020'; ...
            'SIOC:SYS0:ML02:AO021'; ...
            'SIOC:SYS0:ML02:AO022'};

        timestamp_pvs = {'SIOC:SYS0:ML02:SO0009'; ...
            'SIOC:SYS0:ML02:SO0010'; ...
            'SIOC:SYS0:ML02:SO0011'; ...
            'SIOC:SYS0:ML02:SO0012'; ...
            'SIOC:SYS0:ML02:SO0013'; ...
            'SIOC:SYS0:ML02:SO0014'; ...
            'SIOC:SYS0:ML02:SO0015'; ...
            'SIOC:SYS0:ML02:SO0016'; ...
            'SIOC:SYS0:ML02:SO0017'; ...
            'SIOC:SYS0:ML02:SO0018'; ...
            'SIOC:SYS0:ML02:SO0019'; ...
            'SIOC:SYS0:ML02:SO0020'; ...
            'SIOC:SYS0:ML02:SO0021'; ...
            'SIOC:SYS0:ML02:SO0022'};

        new_messages = cell(length(message_pvs),1);
        new_timestamps_left = cell(length(message_pvs),1);
        new_timestamps_right = cell(length(message_pvs),1);

        for i=1:length(message_pvs)

            new_messages(i) = possible_messages(lcaGetSmart(message_pvs(i)));

            if lcaGetSmart(message_pvs(i)) == 1 % No message, don't display a timestamp
                new_timestamps_left(i) = {' '};
                new_timestamps_right(i) = {' '};
            else
                new_timestamps_left(i) = strcat('(', cellstr(lcaGetSmart(timestamp_pvs(i))), ')');
                new_timestamps_right(i) = strcat('(', cellstr(lcaGetSmart(timestamp_pvs(i))), ')');
            end

        end

        set(MessageBox, 'String', new_messages);
        set(TimestampsLeft, 'String', new_timestamps_left);
        set(TimestampsRight, 'String', new_timestamps_right);

    end

end
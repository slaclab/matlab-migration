% This file contains on the user generated functions that are used with the
% laser_vector_auto_gui

%_______________________________
% Functions not generated by Matlab
%_______________________________

% this function is for updating the image_1 plot.
% It does not modify the handles so it does not update them.
function handles = plot_image_1(handles)
h = findobj('Type','axes','Tag','axes1');
handles.image_1_handle = h;
axes(h);
imagesc(handles.image1)


% this function is for updating the image_2 plot.
% It does not modify the handles so it does not update them.
function handles = plot_image_2(handles)
h=findobj('Type','axes','Tag','axes2');
handles.image_2_handle = h;
axes(h);
imagesc(handles.image2)

% says initialize, but it actually just updates the values, so it can be
% called whenever.
function initialize_desired_point(handles)
set(handles.desired_x1,'String',num2str(handles.desired.x1))
set(handles.desired_y1,'String',num2str(handles.desired.y1))
set(handles.desired_x2,'String',num2str(handles.desired.x2))
set(handles.desired_y2,'String',num2str(handles.desired.y2))

% says initialize, but it actually just updates the values, so it can be
% called whenever.
function initialize_current_point(handles)
set(handles.current_x1,'String',num2str(handles.current.x1))
set(handles.current_y1,'String',num2str(handles.current.y1))
set(handles.current_x2,'String',num2str(handles.current.x2))
set(handles.current_y2,'String',num2str(handles.current.y2))

% Initialize the calibration matrices.
function initialize_calibration_matrices(handles)
set(handles.xC11,'String',num2str(handles.calib.xC11))
set(handles.xC12,'String',num2str(handles.calib.xC12))
set(handles.xC21,'String',num2str(handles.calib.xC21))
set(handles.xC22,'String',num2str(handles.calib.xC22))

set(handles.yC11,'String',num2str(handles.calib.yC11))
set(handles.yC12,'String',num2str(handles.calib.yC12))
set(handles.yC21,'String',num2str(handles.calib.yC21))
set(handles.yC22,'String',num2str(handles.calib.yC22))

% the function used to find the "center".
function handles = find_centers(handles)
% find the current points.
[temp_x, temp_y] = simple_image_peak_finder(handles.image1);
handles.current.x1 = int16(temp_x);
handles.current.y1 = int16(temp_y);

[temp_x, temp_y] = simple_image_peak_finder(handles.image2);
handles.current.x2 = int16(temp_x);
handles.current.y2 = int16(temp_y);

% now update the edit boxes
initialize_current_point(handles)

function draw_current_position(handles)

axes(handles.image_1_handle);
line([handles.current.x1 handles.current.x1], [0 handles.image_y_size],...
    'Color', 'r');
line([0 handles.image_x_size], [handles.current.y1 handles.current.y1],...
    'Color', 'r');

axes(handles.image_2_handle);
line([handles.current.x2 handles.current.x2], [0 handles.image_y_size],...
    'Color', 'r');
line([0 handles.image_x_size], [handles.current.y2 handles.current.y2],...
    'Color', 'r');

function draw_desired_position(handles)

axes(handles.image_1_handle);
line([handles.desired.x1 handles.desired.x1], [0 handles.image_y_size],...
    'Color', 'g');
line([0 handles.image_x_size], [handles.desired.y1 handles.desired.y1],...
    'Color', 'g');

axes(handles.image_2_handle);
line([handles.desired.x2 handles.desired.x2], [0 handles.image_y_size],...
    'Color', 'g');
line([0 handles.image_x_size], [handles.desired.y2 handles.desired.y2],...
    'Color', 'g');

function redraw_images(handles)
axes(handles.image_1_handle);
imagesc(handles.image1)
axes(handles.image_2_handle);
imagesc(handles.image2)

draw_current_position(handles)
draw_desired_position(handles)


function find_mirror_solution(handles)

current_to_pass.x1 = handles.current.x1;
current_to_pass.y1 = handles.current.y1;
current_to_pass.x2 = handles.current.x2;
current_to_pass.y2 = handles.current.y2;

desired_to_pass.x1 = handles.desired.x1;
desired_to_pass.y1 = handles.desired.y1;
desired_to_pass.x2 = handles.desired.x2;
desired_to_pass.y2 = handles.desired.y2;

calib.xC11 = handles.calib.xC11;
calib.xC12 = handles.calib.xC12;
calib.xC21 = handles.calib.xC21;
calib.xC22 = handles.calib.xC22;

calib.yC11 = handles.calib.yC11;
calib.yC12 = handles.calib.yC12;
calib.yC21 = handles.calib.yC21;
calib.yC22 = handles.calib.yC22;

[~] = mirror_motion_solver(current_to_pass,desired_to_pass,calib);